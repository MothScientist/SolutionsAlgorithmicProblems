# F. Лифт
#
# Ограничение времени: 1 секунда
# Ограничение памяти: 256Mb
#
# Ввод: стандартный ввод или input.txt.txt
# Вывод: стандартный вывод или output.txt
#
# Тридцатого декабря все сотрудники известной IT-компании отправляются праздновать Новый год!
# На парковке офиса сотрудников уже ожидают автобусы, чтобы отвезти их в ресторан.
# Известно, что на i-м этаже работает ai сотрудников, а парковка расположена на нулевом этаже.
# Изначально лифт расположен на этаже с парковкой.
# Какое минимальное количество времени лифт будет перевозить всех людей на парковку?
# Известно, что лифт движется со скоростью один этаж в секунду, а посадка и высадка происходит мгновенно.
#
# Формат ввода:
# В первой строке дано единственное целое число k(1≤k≤10^9) — количество людей, которое вмещает лифт за одну поездку.
# Во второй строке дано единственное целое число n — количество этажей в здании.
# В следующих n(1≤n≤10^5) строках дано по одному целому неотрицательному числу a i (0≤ai≤10^9),
# которое обозначает количество сотрудников на этаже номер i.
#
# Формат вывода:
# Выведите единственное целое число — минимальное количество секунд, которое необходимо,
# чтобы все сотрудники оказались на парковке.
#
# Пример 1
# Ввод:
# 2
# 3
# 3
# 0
# 1
# Вывод:
# 8

with open('input.txt', 'r') as file:
    elevator_capacity = int(file.readline())  # вместимость лифта
    floors = int(file.readline())  # количество этажей в здании, не считая нулевого
    k = [0] + [int(file.readline()) for _ in range(floors)]  # ki - количество человек на (i+1)-ом этаже

s = 0  # путь пройденный лифтом

for i in range(1, floors + 1):  # начинаем с 1-го этажа, так как на парковке некуда и некого везти
    a = k[i] // elevator_capacity  # сколько полных лифтов мы можем набрать с этажа
    k[i] -= a*elevator_capacity  # вывозим с этажа
    s += a * i * 2  # подъем на этаж и обратно для каждого полного лифта

# теперь мы имеем либо пустые этажи, либо этажи, на которых полностью нельзя полностью заполнить лифт
empty_lst = []
if sum(k) != 0:  # если в здании ещё кто-то остался
    for i in range(floors, 0, -1):  # идем с верхнего этажа вниз
        if k[i] != 0:
            floors = i  # определяем самый верхний этаж, где остались люди
            break  # если нашли, то выхооодим из цикла

    a = 0  # количество людей в лифте
    s += floors  # добавляем путь от парковки до "верхнего" этажа
    s -= 1  # так как на самом верхнем этаже for (который ниже) прибавит единичку, но мы уже находимся там
    g = False  # маркер того, что мы вернулись с полной разгрузки лифта

    for i in range(floors, 0, -1):
        if i in empty_lst:
            continue
        if not g:
            s += 1  # спуск на 1 этаж вниз
        g = False  # ещё не спускались на парковку
        a += k[i]  # загружаем всех с этажа
        k[i] = 0
        if a >= elevator_capacity:  # если перегрузили
            # важный момент! Если у нас на каждом этаже осталось k[i] < elevator_capacity,
            # то 2*k[i] < 2*elevator_capacity, а значит если лифт переполнился, то мы имеем заполненность m,
            # где m: elevator_capacity <= m < 2*elevator_capacity
            if a > elevator_capacity:  # выясняем придется ли возвращаться на этаж
                s += (2 * i)  # добавляем время, необходимое на спуск до парковки и подъем обратно
            else:
                # вычисляем сколько пустых этажей под тем, который мы полностью вывезли, чтобы туда не подниматься
                g = True  # мы после полной разгрузки (спускались на парковку)
                l = 0  # число пустых этажей ниже
                for j in range(i-1, 0, -1):
                    if k[j] == 0:
                        empty_lst.append(j)  # добавляем новый пустой этаж
                        l += 1
                    else:
                        break
                # добавляем время, необходимое на спуск до парковки и подъем обратно о непустого этажа
                s += i + (i - (l + 1))  # путь до парковки и наверх до первого непустого этажа
            a -= elevator_capacity  # выпускаем заполненные лифты
    if a != 0:
        s += 1

with open('output.txt', 'w') as file:
    file.write(str(s))