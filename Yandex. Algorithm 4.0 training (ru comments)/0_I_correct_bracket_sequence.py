# I. Правильная скобочная последовательность
#
# Ограничение времени: 1 секунда
# Ограничение памяти: 64Mb
#
# Ввод: стандартный ввод или input.txt.txt
# Вывод: стандартный вывод или output.txt
#
# Рассмотрим последовательность, состоящую из круглых, квадратных и фигурных скобок.
# Программа должна определить, является ли данная скобочная последовательность правильной.
# Пустая последовательность является правильной.
# Если A — правильная, то последовательности (A), [A], {A} — правильные.
# Если A и B — правильные последовательности, то последовательность AB — правильная.
#
# Формат ввода:
# В единственной строке записана скобочная последовательность, содержащая не более 100000 скобок.
#
# Формат вывода:
# Если данная последовательность правильная, то программа должна вывести строку "yes", иначе строку "no".
#
# Пример 1
# Ввод:
# ()[]
# Вывод:
# yes
#
# Пример 2
# Ввод:
# ([)]
# Вывод:
# no
#
# Пример 3
# Ввод:
# (
# Вывод:
# no

def solution(brackets):
    stack = []  # стек для хранения открывающих скобок
    for i in brackets:
        if i in "[{(":
            stack.append(i)  # открывающую скобку добавляем в стек
        else:
            if len(stack) != 0:
                bracket_close = stack.pop()  # если встретилась закрывающая скобка
            else:
                return "no"

            # закрывающая скобка должна соответствовать последней открывающей
            if not bracket_close == "(" and i == ")":
                return "no"
            elif not bracket_close == "{" and i == "}":
                return "no"
            elif not bracket_close == "[" and i == "]":
                return "no"

    if len(stack) == 0:  # если последовательность закончилась и все открывающие скобки были закрыты
        return "yes"
    else:
        return "no"

a = input()
print(solution(a))